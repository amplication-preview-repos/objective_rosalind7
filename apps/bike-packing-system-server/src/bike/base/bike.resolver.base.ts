/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bike } from "./Bike";
import { BikeCountArgs } from "./BikeCountArgs";
import { BikeFindManyArgs } from "./BikeFindManyArgs";
import { BikeFindUniqueArgs } from "./BikeFindUniqueArgs";
import { CreateBikeArgs } from "./CreateBikeArgs";
import { UpdateBikeArgs } from "./UpdateBikeArgs";
import { DeleteBikeArgs } from "./DeleteBikeArgs";
import { TripFindManyArgs } from "../../trip/base/TripFindManyArgs";
import { Trip } from "../../trip/base/Trip";
import { BikeService } from "../bike.service";
@graphql.Resolver(() => Bike)
export class BikeResolverBase {
  constructor(protected readonly service: BikeService) {}

  async _bikesMeta(
    @graphql.Args() args: BikeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bike])
  async bikes(@graphql.Args() args: BikeFindManyArgs): Promise<Bike[]> {
    return this.service.bikes(args);
  }

  @graphql.Query(() => Bike, { nullable: true })
  async bike(@graphql.Args() args: BikeFindUniqueArgs): Promise<Bike | null> {
    const result = await this.service.bike(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bike)
  async createBike(@graphql.Args() args: CreateBikeArgs): Promise<Bike> {
    return await this.service.createBike({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bike)
  async updateBike(@graphql.Args() args: UpdateBikeArgs): Promise<Bike | null> {
    try {
      return await this.service.updateBike({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bike)
  async deleteBike(@graphql.Args() args: DeleteBikeArgs): Promise<Bike | null> {
    try {
      return await this.service.deleteBike(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Trip], { name: "trips" })
  async findTrips(
    @graphql.Parent() parent: Bike,
    @graphql.Args() args: TripFindManyArgs
  ): Promise<Trip[]> {
    const results = await this.service.findTrips(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
