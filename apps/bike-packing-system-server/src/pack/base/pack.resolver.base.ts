/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pack } from "./Pack";
import { PackCountArgs } from "./PackCountArgs";
import { PackFindManyArgs } from "./PackFindManyArgs";
import { PackFindUniqueArgs } from "./PackFindUniqueArgs";
import { CreatePackArgs } from "./CreatePackArgs";
import { UpdatePackArgs } from "./UpdatePackArgs";
import { DeletePackArgs } from "./DeletePackArgs";
import { TripFindManyArgs } from "../../trip/base/TripFindManyArgs";
import { Trip } from "../../trip/base/Trip";
import { PackService } from "../pack.service";
@graphql.Resolver(() => Pack)
export class PackResolverBase {
  constructor(protected readonly service: PackService) {}

  async _packsMeta(
    @graphql.Args() args: PackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pack])
  async packs(@graphql.Args() args: PackFindManyArgs): Promise<Pack[]> {
    return this.service.packs(args);
  }

  @graphql.Query(() => Pack, { nullable: true })
  async pack(@graphql.Args() args: PackFindUniqueArgs): Promise<Pack | null> {
    const result = await this.service.pack(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pack)
  async createPack(@graphql.Args() args: CreatePackArgs): Promise<Pack> {
    return await this.service.createPack({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pack)
  async updatePack(@graphql.Args() args: UpdatePackArgs): Promise<Pack | null> {
    try {
      return await this.service.updatePack({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pack)
  async deletePack(@graphql.Args() args: DeletePackArgs): Promise<Pack | null> {
    try {
      return await this.service.deletePack(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Trip], { name: "trips" })
  async findTrips(
    @graphql.Parent() parent: Pack,
    @graphql.Args() args: TripFindManyArgs
  ): Promise<Trip[]> {
    const results = await this.service.findTrips(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
